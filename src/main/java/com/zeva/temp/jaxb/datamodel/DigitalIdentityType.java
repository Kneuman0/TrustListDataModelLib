//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.02.16 at 11:23:28 AM EST 
//


package com.zeva.temp.jaxb.datamodel;

import java.io.ByteArrayInputStream;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.CertificateParsingException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;

import javafx.beans.property.SimpleObjectProperty;

import javax.xml.bind.DatatypeConverter;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import com.zeva.temp.jaxb.datamodel.dsig.KeyValueType;
import com.zeva.tlGen.dataModel.CertificateBean;
import com.zeva.tlGen.dataModel.ProviderAttribute;
import com.zeva.certs.utils.CertificateUtilities;


/**
 * <p>Java class for DigitalIdentityType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DigitalIdentityType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice>
 *         &lt;element name="X509Certificate" type="{http://www.w3.org/2001/XMLSchema}base64Binary"/>
 *         &lt;element name="X509SubjectName" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element ref="{http://www.w3.org/2000/09/xmldsig#}KeyValue"/>
 *         &lt;element name="X509SKI" type="{http://www.w3.org/2001/XMLSchema}base64Binary"/>
 *         &lt;element name="Other" type="{http://uri.etsi.org/02231/v2#}AnyType"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DigitalIdentityType", propOrder = {
    "x509Certificate",
    "x509SubjectName",
    "keyValue",
    "x509SKI",
    "other"
})
public class DigitalIdentityType extends ProviderAttribute{

    @XmlElement(name = "X509Certificate")
    protected byte[] x509Certificate;
    @XmlElement(name = "X509SubjectName")
    protected String x509SubjectName;
    @XmlElement(name = "KeyValue", namespace = "http://www.w3.org/2000/09/xmldsig#")
    protected KeyValueType keyValue;
    @XmlElement(name = "X509SKI")
    protected byte[] x509SKI;
    @XmlElement(name = "Other")
    protected AnyType other;
    
    @XmlTransient
    private ProviderAttributeType type;
    
    @XmlTransient
    private X509Certificate parentCert;
    
    @XmlTransient
    private String stringName;
    
    @XmlTransient
    private SimpleObjectProperty<ProviderAttribute> name;
    
    @XmlTransient
    private boolean revoked;
    
    public ProviderAttribute initialize(){
    	this.type = ProviderAttributeType.CERTIFICATE_BEAN;
    	
    	if(x509Certificate != null){
	    	try {
	    		CertificateFactory fact = CertificateFactory.getInstance("X.509");
				parentCert = (X509Certificate)fact.generateCertificate(new ByteArrayInputStream(x509Certificate));
			} catch (CertificateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    	Map<String, String> attr = new HashMap<String, String>();
			for(String pair : parentCert.getSubjectX500Principal().toString().split(",")){
				String[] attributes = pair.split("=");	
				if(attributes.length == 2)
					attr.put(attributes[0], attributes[1]);
			}
			
			this.stringName = attr.get("CN") != null && !attr.get("CN").isEmpty() ? attr.get("CN") : attr.get("OU");
    	}
		name = new SimpleObjectProperty<ProviderAttribute>(this);
		
		return this;
		
    }
    
    public DigitalIdentityType(){}
    
    /**
     * Dummy constructor for Root node in GUI
     * @param name
     */
    public DigitalIdentityType(String name){
    	this.stringName = name;
    	this.name = new SimpleObjectProperty<ProviderAttribute>(this);
    	this.type = ProviderAttributeType.CERTIFICATE_BEAN;
    }
    
    public DigitalIdentityType(CertificateBean bean){
    	try {
			this.x509Certificate = bean.getParentCert().getEncoded();
		} catch (CertificateEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	this.x509SKI = bean.getX509SKI().getBytes();
    	this.x509SubjectName = bean.getParentCert().getSubjectX500Principal().toString();
    	this.initialize();
    }

    /**
     * Gets the value of the x509Certificate property.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getX509Certificate() {
        return x509Certificate;
    }

    /**
     * Sets the value of the x509Certificate property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     */
    public void setX509Certificate(byte[] value) {
        this.x509Certificate = value;
    }
    
    

    public boolean isRevoked() {
		return revoked;
	}

	public void setRevoked(boolean revoked) {
		this.revoked = revoked;
	}

	/**
     * Gets the value of the x509SubjectName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getX509SubjectName() {
        return x509SubjectName;
    }

    /**
     * Sets the value of the x509SubjectName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setX509SubjectName(String value) {
        this.x509SubjectName = value;
    }

    /**
     * Gets the value of the keyValue property.
     * 
     * @return
     *     possible object is
     *     {@link KeyValueType }
     *     
     */
    public KeyValueType getKeyValue() {
        return keyValue;
    }

    /**
     * Sets the value of the keyValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link KeyValueType }
     *     
     */
    public void setKeyValue(KeyValueType value) {
        this.keyValue = value;
    }

    /**
     * Gets the value of the x509SKI property.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getX509SKI() {
        return x509SKI;
    }

    /**
     * Sets the value of the x509SKI property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     */
    public void setX509SKI(byte[] value) {
        this.x509SKI = value;
    }

    /**
     * Gets the value of the other property.
     * 
     * @return
     *     possible object is
     *     {@link AnyType }
     *     
     */
    public AnyType getOther() {
        return other;
    }

    /**
     * Sets the value of the other property.
     * 
     * @param value
     *     allowed object is
     *     {@link AnyType }
     *     
     */
    public void setOther(AnyType value) {
        this.other = value;
    }
    
    /**
	 * @return the stringName
	 */
	public String getStringName() {
		return stringName;
	}
	

	/**
	 * @param stringName the stringName to set
	 */
	public void setStringName(String stringName) {
		this.stringName = stringName;
	}
	
	/**
	 * Checks if the two object are equal by getting the parent certificates and comparing their serial numbers
	 */
	@Override
	public boolean equals(Object object){
		if(object instanceof DigitalIdentityType){
			DigitalIdentityType bean = (DigitalIdentityType)object;
			if(bean.getParentCert() != null){
				return bean.getParentCert().getSerialNumber().toString().equals(this.parentCert.getSerialNumber().toString());
			}else{
				return object.hashCode() == bean.hashCode();
			}
		}else{
			return false;
		}
		
	}

	@Override
	public ProviderAttributeType getType() {
		
		return type;
	}
	
	/**
	 * @return the parentCert
	 */
	public X509Certificate getParentCert() {
		return parentCert;
	}

	/**
	 * @param parentCert the parentCert to set
	 */
	public void setParentCert(X509Certificate parentCert) {
		this.parentCert = parentCert;
	}

	/**
	 * Use of this method assumed a check has been placed using the 
	 * getType() first to determine the Type of this subclass
	 */
	@SuppressWarnings("unchecked")
	@Override
	public DigitalIdentityType getEncapsulatedBean() {
		
		return this;
	}
	
	
	public SimpleObjectProperty<ProviderAttribute> nameProperty(){
		return new SimpleObjectProperty<ProviderAttribute>(this);
	}
	
	
	
	/**
	 * @param type the type to set
	 */
	public void setType(ProviderAttributeType type) {
		this.type = type;
	}

	public String toString(){
		if(parentCert == null) return "";
		
		StringBuilder builder = new StringBuilder();
		builder.append("Version: " + parentCert.getVersion());
		builder.append("\nSerial Number: " + parentCert.getSerialNumber());
		builder.append("\nStart Date: " + parentCert.getNotBefore());
		builder.append("\nEnd Date: " + parentCert.getNotAfter());
		builder.append("\nIssuer: " + parentCert.getIssuerX500Principal().toString());
		builder.append("\nSubject: " + parentCert.getSubjectX500Principal().toString());
		builder.append("\nAlgorithm: " + parentCert.getSigAlgName());
		builder.append("\nOIDs: " + parentCert.getCriticalExtensionOIDs());
		try {
			builder.append("\nKey Uses: " + parentCert.getExtendedKeyUsage());
			builder.append("\n\nX509SKI: " + CertificateUtilities.generateX509SKI(parentCert));
			builder.append("\n\nBase64Encoded: " + DatatypeConverter.printBase64Binary(parentCert.getEncoded()));
		} catch (CertificateParsingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CertificateEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
				
		return builder.toString();
	}

}
